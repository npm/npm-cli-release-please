# This file is automatically added by @npmcli/template-oss. Do not edit.

name: Release

on:
  workflow_dispatch:
    inputs:
      release-pr:
        description: a release PR number to rerun release jobs on
        type: string
  push:
    branches:
      - main
      - latest
      - release/v*

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  release:
    name: Release
    if: github.repository_owner == 'npm'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      pr: ${{ steps.release.outputs.pr }}
      release: ${{ steps.release.outputs.release }}
      releases: ${{ steps.release.outputs.releases }}
      branch: ${{ steps.release.outputs.pr-branch }}
      pr-number: ${{ steps.release.outputs.pr-number }}
      comment-id: ${{ steps.pr-comment.outputs.result }}
      check-id: ${{ steps.check.outputs.check-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup

      - name: Release Please
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx --offline template-oss-release-please "${{ github.ref_name }}" "${{ inputs.release-pr }}"

      - name: Comment Text
        uses: actions/github-script@v6
        if: steps.release.outputs.pr-number
        id: comment-text
        env:
          PR_NUMBER: ${{ steps.release.outputs.pr-number }}
          REF_NAME: ${{ github.ref_name }}
        with:
          result-encoding: string
          script: |
            const { runId, repo: { owner, repo } } = context
            const { data: workflow } = await github.rest.actions.getWorkflowRun({ owner, repo, run_id: runId })
            let body = '## Release Manager\n\n'
            body += `Release workflow run: ${workflow.html_url}\n\n#### Force CI to Update This Release\n\n`
            body += `This PR will be updated and CI will run for every non-\`chore:\` commit that is pushed to \`main\`. `
            body += `To force CI to update this PR, run this command:\n\n`
            body += `\`\`\`\ngh workflow run release.yml -r ${process.env.REF_NAME} -R ${owner}/${repo} -f release-pr=${process.env.PR_NUMBER}\n\`\`\``
            return body

      - name: Post Pull Request Comment
        if: steps.comment-text.outputs.result
        uses: ./.github/actions/upsert-comment
        id: pr-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.comment-text.outputs.result }}
          number: ${{ steps.release.outputs.pr-number }}

      - name: Create Check
        uses: ./.github/actions/create-check
        if: steps.release.outputs.pr-sha
        id: check
        with:
          sha: ${{ steps.release.outputs.pr-sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          job-name: Release

  update:
    name: Update Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    if: needs.release.outputs.pr
    needs: release
    outputs:
      sha: ${{ steps.commit.outputs.sha }}
      check-id: ${{ steps.check.outputs.check-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.release.outputs.branch }}
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup

      - name: Run Post Pull Request Actions
        env:
          RELEASE_PR_NUMBER: ${{ needs.release.outputs.pr-number }}
          RELEASE_COMMENT_ID: ${{ needs.release.outputs.comment-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm exec --offline -- template-oss-release-manager --lockfile=true
          npm run rp-pull-request --ignore-scripts -ws -iwr --if-present

      - name: Commit
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git commit --all --amend --no-edit || true
          git push --force-with-lease
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Create Check
        uses: ./.github/actions/create-check
        if: steps.commit.outputs.sha
        id: check
        with:
          sha: ${{ steps.release.outputs.pr-sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          job-name: Release

      - name: Conclude Check
        uses: LouisBrunner/checks-action@v1.5.0
        if: needs.release.outputs.check-id && (success() || failure())
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          conclusion: ${{ job.status }}
          check_id: ${{ needs.release.outputs.check-id }}

  ci:
    name: CI - Release
    needs: [ release, update ]
    if: needs.release.outputs.pr
    uses: ./.github/workflows/ci.yml
    with:
      ref: ${{ needs.release.outputs.branch }}
      check-sha: ${{ needs.update.outputs.sha }}

  post-ci:
    name: Post CI - Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [ release, update, ci ]
    if: needs.release.outputs.pr && (success() || failure())
    steps:
      - name: Get Needs Result
        id: needs-result
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            result="failure"
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            result="cancelled"
          else
            result="success"
          fi
          echo "result=$result" >> $GITHUB_OUTPUT

      - name: Conclude Check
        uses: LouisBrunner/checks-action@v1.5.0
        if: needs.release.outputs.check-id && (success() || failure())
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          conclusion: ${{ steps.needs-result.outputs.result }}
          check_id: ${{ needs.update.outputs.check-id }}

  post-release:
    name: Post Release - Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: release
    if: needs.release.outputs.releases
    steps:
      - name: Comment Text
        uses: actions/github-script@v6
        id: comment-text
        env:
          RELEASES: ${{ needs.release.outputs.releases }}
        with:
          result-encoding: string
          script: |
            const releases = JSON.parse(process.env.RELEASES)
            const { runId, repo: { owner, repo } } = context
            const issue_number = releases[0].prNumber

            const releasePleaseComments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number })
              .then((comments) => comments.filter(c => c.login === 'github-actions[bot]' && c.body.includes('Release is at')))

            for (const comment of releasePleaseComments) {
              await github.rest.issues.deleteComment({ owner, repo, comment_id: comment.id })
            }

            let body = '## Release Workflow\n\n'
            for (const { pkgName, version, url } of releases) {
              body += `- \`${pkgName}@${version}\` ${url}\n`
            }
            body += `- Workflow run: :arrows_counterclockwise: https://github.com/${owner}/${repo}/actions/runs/${runId}`
            return body

      - name: Create Release PR Comment
        if: steps.comment-text.outputs.result
        uses: ./.github/actions/upsert-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.comment-text.outputs.result }}
          number: ${{ fromJson(needs.release.outputs.release).prNumber }}
          includes: ${{ github.run_id }}

  release-integration:
    name: Release Integration
    needs: release
    if: needs.release.outputs.release
    uses: ./.github/workflows/release-integration.yml
    with:
      release: needs.release.outputs.release
      releases: needs.release.outputs.releases

  post-release-integration:
    name: Post Release Integration - Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [ release, release-integration ]
    if: needs.release.outputs.release && (success() || failure())
    steps:
      - name: Get Needs Result
        id: needs-result
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            result="x"
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            result="heavy_multiplication_x"
          else
            result="white_check_mark"
          fi
          echo "result=$result" >> $GITHUB_OUTPUT

      - name: Comment Text
        uses: actions/github-script@v6
        id: comment-text
        env:
          PR_NUMBER: ${{ fromJSON(needs.release.outputs.release).prNumber }}
          RESULT: ${{ steps.needs-result.outputs.result }}
        with:
          script: |
            const { RESULT } = process.env             
            const tagCodeowner = RESULT !== 'white_check_mark'
            if (tagCodeowner) {
              let body = ''
              body += `\n\n:rotating_light:`
              body += ` @npm/cli-team: The post-release workflow failed for this release.`
              body += ` Manual steps may need to be taken after examining the workflow output`
              body += ` from the above workflow run. :rotating_light:`
              return body
            }

      - name: Update Release PR Comment
        if: steps.comment-text.outputs.result
        uses: ./.github/actions/upsert-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: "## Release Workflow"
          find: "Workflow run: :[a-z_]+:"
          replace: "Workflow run :${{ steps.needs-result.outputs.result }}:"
          append: ${{ steps.comment-text.outputs.result }}
          number: ${{ fromJson(needs.release.outputs.release).prNumber }}
          includes: ${{ github.run_id }}
