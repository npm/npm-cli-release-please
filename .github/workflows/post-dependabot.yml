# This file is automatically added by @npmcli/template-oss. Do not edit.

name: Post Dependabot

on:
  # workflow dispatch is only for testing
  workflow_dispatch:
    inputs:
      directory:
        description: package directory to test
      update-type:
        description: update type to test
  pull_request:


jobs:
  dependency:
    name: "@npmcli/template-oss"
    permissions:
      contents: write
    outputs:
      sha: ${{ steps.sha.outputs.sha }}
      changes: ${{ steps.apply.outputs.changes }}
    if: github.repository_owner == 'npm' && (github.actor == 'dependabot[bot]' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Fetch Dependabot Metadata
        id: metadata
        if: github.event_name == 'pull_request'
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Is Dependency
        if: github.event_name == 'workflow_dispatch' || contains(steps.metadata.outputs.dependency-names, '@npmcli/template-oss')
        id: dependency
        run: echo "continue=true" >> $GITHUB_OUTPUT

      - name: Checkout
        if: steps.dependency.outputs.continue
        uses: actions/checkout@v3
        with:
          ref: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.ref) || '' }}

      - name: Setup
        if: steps.dependency.outputs.continue
        uses: ./.github/actions/setup

      - name: Get Workspaces
        if: steps.dependency.outputs.continue
        uses: ./.github/actions/changed-workspaces
        id: workspaces
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: '["${{ inputs.directory || steps.metadata.outputs.directory }}"]'

      - name: Apply Changes
        if: steps.workspaces.outputs.flags
        id: apply
        run: |
          npm run template-oss-apply ${{ steps.workspaces.outputs.flags }}
          if [[ `git status --porcelain` ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
          # This only sets the conventional commit prefix. This workflow can't reliably determine
          # what the breaking change is though. If a BREAKING CHANGE message is required then
          # this PR check will fail and the commit will be amended with stafftools
          if [[ "${{ inputs.update-type || steps.metadata.outputs.update-type }}" == "version-update:semver-major" ]]; then
            prefix='feat!'
          else
            prefix='chore'
          fi
          echo "message=$prefix: postinstall for dependabot template-oss PR" >> $GITHUB_OUTPUT

      # This step will fail if template-oss has made any workflow updates. It is impossible
      # for a workflow to update other workflows. In the case it does fail, we continue
      # and then try to apply only a portion of the changes in the next step
      - name: Push All Changes
        if: steps.apply.outputs.changes
        id: push
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git commit -am "${{ steps.apply.outputs.message }}"
          git push

      # If the previous step failed, then reset the commit and remove any workflow changes
      # and attempt to commit and push again. This is helpful because we will have a commit
      # with the correct prefix that we can then --amend with @npmcli/stafftools later.
      - name: Push All Changes Except Workflows
        if: steps.apply.outputs.changes && steps.push.outcome == 'failure'
        id: push-on-error
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git reset HEAD~
          git checkout HEAD -- .github/workflows/
          git clean -fd .github/workflows/
          git commit -am "${{ steps.apply.outputs.message }}"
          git push

      - name: Get SHA
        if: steps.apply.outputs.changes
        id: sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # If template-oss is applying breaking changes, then we fail this PR with a message saying what to do. There's no need
      # to run CI in this case because the PR will need to be fixed manually so CI will run on those commits.
      - name: Fail on Breaking Change
        if: steps.apply.outputs.changes && startsWith(steps.apply.outputs.message, 'feat!') && (success() || failure())
        run: |
          TITLE="Breaking Changes"
          MESSAGE="This PR has a breaking change. Run 'npx -p @npmcli/stafftools gh template-oss-fix'"
          MESSAGE="$MESSAGE for more information on how to fix this with a BREAKING CHANGE footer."
          echo "::error title=$TITLE::$MESSAGE"
          exit 1

  # If everything succeeded so far then we run our normal CI workflow since GitHub actions wont rerun after a bot
  # pushes a new commit to a PR. We rerun all of CI because template-oss could affect any code in the repo including
  # lint settings and test settings.
  ci:
    name: Dependency - CI
    needs: [ dependency ]
    if: needs.dependency.outputs.sha
    uses: ./.github/workflows/ci.yml
    with:
      check-sha: ${{ needs.dependency.outputs.sha }}
